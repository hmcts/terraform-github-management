# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
   terraformVersion: 0.14.4
   timeoutInMinutes: 60
   agentPool: 'ubuntu-18.04'
   service_connection: 'DTS-CFTPTL-INTSVC'
   storage_account_rg: 'core-infra-intsvc-rg'
   storage_account_name: 'cftptlintsvc'
   component: 'terraform-github-management'
   build: $(Build.BuildNumber)
   action:

pool:
  vmImage: 'ubuntu-latest'

steps:

- task: TerraformInstaller@0
  displayName: Terraform install
  inputs:
    terraformVersion: ${{ variables.terraformVersion }}

- task: AzureKeyVault@1
  displayName: 'Get azure devops API token from Keyvault'
  inputs:
    runAsPreJob: false
    ConnectedServiceName: 'DCD-CFT-Sandbox'
    keyVaultName: 'infra-vault-sandbox'
    secretsFilter: 'azure-devops-token'

- task: Bash@3
  displayName: Prevent parallel run
  env:
    thisbuild: $(Build.BuildId)
    pipelinedefinition: $(System.DefinitionId)
    azuredevopstoken: $(azure-devops-token)
  inputs:
    filePath: $(System.DefaultWorkingDirectory)/pipeline-scripts/builds-check.sh

- task: TerraformCLI@0
  displayName: Init - ${{ variables.component }}
  inputs:
    command: 'init'
    backendType: 'azurerm'
    backendServiceArm: '${{ variables.service_connection }}'
    backendAzureRmResourceGroupName: '${{ variables.storage_account_rg }}'
    backendAzureRmStorageAccountName: '${{ variables.storage_account_name }}'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: '${{ variables.component }}.tfstate'
    workingDirectory: $(System.DefaultWorkingDirectory)/terraform

- task: TerraformCLI@0
  displayName: terraform validate
  inputs:
    command: 'validate'
    workingDirectory: $(System.DefaultWorkingDirectory)/terraform

- task: TerraformCLI@0
  displayName: Plan - ${{ variables.component }}
  inputs:
    command: 'plan'
    commandOptions: '-out=tfplan -var github_owner=$(github-management-api-token)'
    workingDirectory: $(System.DefaultWorkingDirectory)/terraform
    environmentServiceName: '${{ variables.service_connection }}'

- task: TerraformCLI@0
  displayName: Apply - ${{ variables.component }}
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    commandOptions: tfplan
    command: apply
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    environmentServiceName: '${{ variables.service_connection }}'
